package one;

/**
 * На некоторых кросс-платформенных станциях метро (как, например, «Третьяковская»)
 * на разные стороны платформы приходят поезда разных направлений.
 * Таня договорилась встретиться с подругой на такой станции,
 * но поскольку подруга приехала из другого часового пояса, то из-за джетлага сильно проспала,
 * и Тане пришлось долго её ждать. Поезда всегда ходят точно по расписанию, и Таня знает,
 * что поезд стоит на платформе ровно одну минуту, а интервал между поездами
 * (время, в течение которого поезда у платформы нет) составляет a минут для поездов на первом пути
 * и b минут для поездов на втором пути. То есть на первый путь приезжает поезд и стоит одну минуту,
 * затем в течение a минут поезда у платформы нет, затем в течение одной минуты у платформы стоит следующий поезд и т. д.
 *
 * Пока Таня стояла на платформе, она насчитала n поездов на первом пути и m поездов на втором пути.
 * Определите минимальное и максимальное время, которое Таня могла провести на платформе,
 * или сообщите, что она точно сбилась со счёта.
 *
 * Все поезда, которые видела Таня, она наблюдала в течение всей минуты,
 * то есть Таня не приходит и не уходит с платформы посередине той минуты,
 * когда поезд стоит на платформе.
 */

import java.util.Scanner;

public class Subway {
    public static void main(String[] args) {

        Scanner scan = new Scanner(System.in);

        int a = scan.nextInt();
        int b = scan.nextInt();
        int n = scan.nextInt();
        int m = scan.nextInt();
        scan.close();

        minMaxTime(a, b, n, m);
    }

    public static void minMaxTime(int a, int b, int n, int m) {
        int min = Math.max(n + ((n - 1) * a), m + ((m - 1) * b));
        int max = Math.min(n + ((n + 1) * a), m + ((m + 1) * b));
        if (min <= max) {
            System.out.println(min + " " + max);
        } else {
            System.out.println(-1);
        }
    }
}

