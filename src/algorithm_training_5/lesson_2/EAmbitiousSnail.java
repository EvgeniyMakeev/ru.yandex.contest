package algorithm_training_5.lesson_2;

import java.util.Scanner;


/**
 * Домашний питомец мальчика Васи — улитка Петя.
 * Петя обитает на бесконечном в обе стороны вертикальном столбе,
 * который для удобства можно представить как числовую прямую.
 * Изначально Петя находится в точке 0.
 * Вася кормит Петю ягодами. У него есть n ягод, каждая в единственном экземпляре.
 * Вася знает, что если утром он даст Пете ягоду с номером i,
 * то поев и набравшись сил, за остаток дня Петя поднимется на ai единиц вверх по столбу,
 * но при этом за ночь, потяжелев, съедет на bi единиц вниз.
 * Параметры различных ягод могут совпадать.
 * Пете стало интересно, а как оно там, наверху, и Вася взялся ему в этом помочь.
 * Ближайшие n дней он будет кормить Петю ягодами из своего запаса таким образом,
 * чтобы максимальная высота, на которой побывал Петя за эти n дней была максимальной.
 * К сожалению, Вася не умеет программировать, поэтому он попросил вас о помощи.
 * Найдите, максимальную высоту, на которой Петя сможет побывать за эти n дней
 * и в каком порядке Вася должен давать Пете ягоды, чтобы Петя смог её достичь!
 *
 * Формат ввода
 * В первой строке входных данных дано число n(1≤n≤5⋅105) — количество ягод у Васи.
 * В последующих n строках описываются параметры каждой ягоды.
 * В i+1 строке дано два числа ai и bi(0≤ai,bi≤109) — то,
 * насколько поднимется улитка за день после того,
 * как съест i ягоду и насколько опуститься за ночь.
 * Формат вывода
 * В первой строке выходных данных выведите единственное число — максимальную высоту,
 * которую сможет достичь Петя, если Вася будет его кормить оптимальным образом.
 * В следующей строке выведите n различных целых чисел от 1 до n — порядок,
 * в котором Вася должен кормить Петю (i число в строке соответствует номеру ягоды,
 * которую Вася должен дать Пете в i день чтобы Петя смог достичь максимальной высоты).
 */

//WA

public class EAmbitiousSnail {
    public static void main(String[] args) {
        try (Scanner scanner = new Scanner(System.in)) {
            int numberOfBerries = scanner.nextInt();
            int maxHigh = 0;
            if (numberOfBerries == 1) {
                maxHigh = scanner.nextInt();
                System.out.println(maxHigh);
                System.out.println(numberOfBerries);
            } else {
                int[][] berries = new int[numberOfBerries][2];
                int[] queue = new int[numberOfBerries];
                queue[0] = 1;
                queue[numberOfBerries - 1] = 2;
                for (int i = 0; i < numberOfBerries; i++) {
                    berries[i][0] = scanner.nextInt();
                    berries[i][1] = scanner.nextInt();
                    if (berries[queue[0] - 1][0] - berries[queue[0] - 1][1]
                            < berries[i][0] - berries[i][1]) {
                        queue[0] = i + 1;
                    }
                    if (berries[queue[numberOfBerries - 1] - 1][0] - berries[queue[numberOfBerries - 1] - 1][1]
                            > berries[i][0] - berries[i][1]) {
                        queue[numberOfBerries - 1] = i + 1;
                    }
                }

                System.out.println(maxHigh);
                for (int i = 0; i < numberOfBerries; i++) {
                    System.out.print(queue[i] + " ");
                }
            }
        }
    }
}
